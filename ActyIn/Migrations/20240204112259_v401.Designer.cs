// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Postgres.Context.DBContext;

#nullable disable

namespace ActyIn.Migrations
{
    [DbContext(typeof(NpgsqlContext))]
    [Migration("20240204112259_v401")]
    partial class v401
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Postgres.Context.Entities.ApplicationFileEntity", b =>
                {
                    b.Property<int>("SportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SportId"));

                    b.Property<string>("ContentType")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SportName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SportId");

                    b.ToTable("ApplicationImages");

                    b.HasData(
                        new
                        {
                            SportId = 1,
                            ContentType = "application/json",
                            FileName = "hiking.jpg",
                            SportName = "hiking"
                        },
                        new
                        {
                            SportId = 2,
                            ContentType = "application/json",
                            FileName = "basketball.jpg",
                            SportName = "basketball"
                        },
                        new
                        {
                            SportId = 3,
                            ContentType = "application/json",
                            FileName = "chess.jpg",
                            SportName = "chess"
                        },
                        new
                        {
                            SportId = 4,
                            ContentType = "application/json",
                            FileName = "bicycle.jpg",
                            SportName = "bicycle"
                        },
                        new
                        {
                            SportId = 5,
                            ContentType = "application/json",
                            FileName = "billiards.jpg",
                            SportName = "billiards"
                        },
                        new
                        {
                            SportId = 6,
                            ContentType = "application/json",
                            FileName = "roadtrip.jpg",
                            SportName = "roadtrip"
                        },
                        new
                        {
                            SportId = 7,
                            ContentType = "application/json",
                            FileName = "running.jpg",
                            SportName = "running"
                        },
                        new
                        {
                            SportId = 8,
                            ContentType = "application/json",
                            FileName = "tennis.jpg",
                            SportName = "tennis"
                        });
                });

            modelBuilder.Entity("Postgres.Context.Entities.AthletesEntity", b =>
                {
                    b.Property<int>("AthletesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AthletesId"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FavoriteActivity")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int>("PostalCode")
                        .HasColumnType("integer");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("AthletesId");

                    b.ToTable("AthletesInfo");
                });

            modelBuilder.Entity("Postgres.Context.Entities.BookingEntity", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BookingId"));

                    b.Property<string>("ActivityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("AthletesId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("boolean");

                    b.Property<int>("MatchModelId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SelectedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UsernamePicker")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UsernameSelected")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BookingId");

                    b.HasIndex("AthletesId");

                    b.HasIndex("MatchModelId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Postgres.Context.Entities.ChosenActivityEntity", b =>
                {
                    b.Property<int>("ChosenActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ChosenActivityId"));

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ChosenActivityId");

                    b.ToTable("ChooseActivityInfo");
                });

            modelBuilder.Entity("Postgres.Context.Entities.FileEntity", b =>
                {
                    b.Property<int>("AthleteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AthleteId"));

                    b.Property<string>("AthleteName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContentType")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AthleteId");

                    b.ToTable("AthleteImageProfile");
                });

            modelBuilder.Entity("Postgres.Context.Entities.MatchModelEntity", b =>
                {
                    b.Property<int>("MatchModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MatchModelId"));

                    b.Property<bool>("LikeThePotentialAthlete")
                        .HasColumnType("boolean");

                    b.HasKey("MatchModelId");

                    b.ToTable("MatchModels");
                });

            modelBuilder.Entity("Postgres.Context.Entities.BookingEntity", b =>
                {
                    b.HasOne("Postgres.Context.Entities.AthletesEntity", "Athletes")
                        .WithMany("Bookings")
                        .HasForeignKey("AthletesId");

                    b.HasOne("Postgres.Context.Entities.MatchModelEntity", "MatchModel")
                        .WithMany("BookingEntities")
                        .HasForeignKey("MatchModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Athletes");

                    b.Navigation("MatchModel");
                });

            modelBuilder.Entity("Postgres.Context.Entities.AthletesEntity", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Postgres.Context.Entities.MatchModelEntity", b =>
                {
                    b.Navigation("BookingEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
